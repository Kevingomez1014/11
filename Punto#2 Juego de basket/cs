using System;
// me salia un error a la hora de generar los nombres aleatiros entonces inventigue y con esto lo corregi
namespace x {
// aca defino la interfaz que piden en el ejercicio y utilizo el get para dar acceso a las propiedades
public interface Baseball{
    string Nombre { get; }
    string Posicion { get; }
    int Rendimiento { get; }
}

// aca realizo la clase jugador para definirlo
public class Jugador : Baseball{
    private string nombre;
    private string posicion;
    private int rendimiento;
    private Random rand;

    public Jugador(string nombre, string posicion, int rendimiento)
    {
        this.nombre = nombre;
        this.posicion = posicion;
        this.rendimiento = rendimiento;
        this.rand = new Random();
    }
  // aca creo una nuevas clases para usar el get y retornarlos 
    public string Nombre { get { return nombre; } }
    public string Posicion { get { return posicion; } }
    public int Rendimiento { get { return rendimiento; } }

   // esto lo utilizo para mayor facilidad y no tener q ingresar a sus propiedades 
    public override string ToString() {
        return $"{Nombre} ({Posicion}) - Rendimiento: {Rendimiento}";
    }
}

// aca defino los nombres aleatorios
 public static string Nombres_Apellidos(){
    string[] nombres = { "Kevin", "Marlon", "Carlos", "Arnoldo", "Luis", "Pepe", "Pedro", "Daniel" };
    string[] apellidos = { "Gomez", "Gonzalez", "Cardona", "Pabon", "Salah", "Rodriguez", "Sanchez", "Diaz" };

    Random rand = new Random();
    string nombre_al_asar = nombres[rand.Next(0, nombres.Length)];
    string apellido_al_asar = apellidos[rand.Next(0, apellidos.Length)];

    return $"{nombre_al_asar} {apellido_al_asar}";
}

class Basket
{
    static void Main(string[] args)
    {
        
        List<Baseball> jugadoresR = new List<Baseball>
        {
            new Jugador(Nombres_Apellidos(), "Base", 8),
            new Jugador(Nombres_Apellidos(), "Ala_Pívot", 7),
            new Jugador(Nombres_Apellidos(), "Escolta", 9),
 
        };

        List<Baseball> Team1 = new List<Baseball>();
        List<Baseball> Team2 = new List<Baseball>();

        Console.WriteLine("Selección de jugadores: ");

        for (int i = 0; i < 3; i++)
        {
            int agregarJugador = new Random().Next(0, jugadoresR.Count);
            Baseball jugadorS = jugadoresR[agregarJugador];
            jugadoresR.RemoveAt(agregarJugador);

            if (i % 2 == 0)
            {
                Team1.Add(jugadorS);
                Console.WriteLine($"team 1: Agregado {jugadorS.Nombre}");
            }
            else
            {
                Team2.Add(jugadorS);
                Console.WriteLine($"team 2: Agregado {jugadorS.Nombre}");
            }
        }

        int RendimientoTeam1 = Team1.Sum(jugador => jugador.Rendimiento);
        int RendimientoTeam2 = Team2.Sum(jugador => jugador.Rendimiento);

        Console.WriteLine($"\nResultado del partido:");
        Console.WriteLine($"team 1 - Puntaje total: {RendimientoTeam1}");
        Console.WriteLine($"team 2 - Puntaje total: {RendimientoTeam2}");

        if (RendimientoTeam1 > RendimientoTeam2)
        {
            Console.WriteLine("¡El team 1 gana el partido!");
        }
        else if (RendimientoTeam2 > RendimientoTeam1)
        {
            Console.WriteLine("¡El team 2 gana el partido!");
        }
        else
        {
            Console.WriteLine("partido empatado.");
        }
    }
 }
}


